(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{368:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),a("h3",{attrs:{id:"正则表达式-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式-2"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),a("p",[t._v("正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。这些模式被用于"),a("code",[t._v("RegExp")]),t._v("的 "),a("code",[t._v("exec")]),t._v("和 "),a("code",[t._v("text")]),t._v("方法，以及"),a("code",[t._v("String")]),t._v("中的 "),a("code",[t._v("match")]),t._v("、"),a("code",[t._v("matchAll")]),t._v("、"),a("code",[t._v("replace")]),t._v("、"),a("code",[t._v("search")]),t._v("和"),a("code",[t._v("split")]),t._v("方法")]),t._v(" "),a("h3",{attrs:{id:"创建表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建表达式"}},[t._v("#")]),t._v(" 创建表达式")]),t._v(" "),a("p",[a("strong",[t._v("字面量")]),t._v("\n使用两个 "),a("code",[t._v("/")]),t._v(" 直接创建正则表达，已斜杠表示开始和结束")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ab")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("当脚本加载后，正则表达式字面量就会被编译。当正则表达式保存不变时，使用此方法可获得更好的性能。\n"),a("code",[t._v("**RegExp**")]),a("strong",[t._v("构造函数")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegRxp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"g"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于   var reg = /ab/g")]),t._v("\n")])])]),a("p",[t._v("字面量创建斜杠结束后面参数和构造函数第二个参数表示修饰符。")]),t._v(" "),a("p",[t._v("上面两种写法是等加价的都新建了一个在正则表达式对象。区别在于，第一种再引擎编译代码时，就会新建正则表达式。第二种方法在运行时新建表达式，所以字面量效率更高。并且字面量比较便利直观，基本上都会采用字面量定义正则表达式。")]),t._v(" "),a("h3",{attrs:{id:"实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[t._v("#")]),t._v(" 实例属性")]),t._v(" "),a("p",[t._v("正则修饰符相关实例属性（只读）")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ignoreCase")]),t._v("：返回布尔值，表示是否设置了"),a("code",[t._v("i")]),t._v("修饰符")]),t._v(" "),a("li",[a("code",[t._v("global")]),t._v("：返回布尔值，表示是否设置了"),a("code",[t._v("g")]),t._v("修饰符")]),t._v(" "),a("li",[a("code",[t._v("multiline")]),t._v("：返回布尔值，表示是否设置了"),a("code",[t._v("m")]),t._v("修饰符")]),t._v(" "),a("li",[a("code",[t._v("flags")]),t._v("：返回一个字符串，包含设置的所有修饰符")])]),t._v(" "),a("p",[t._v("与修饰符无关实力属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("lastIndex")]),t._v("：返回一个证书，表示下一次开始搜索的位置")]),t._v(" "),a("li",[a("code",[t._v("source")]),t._v("：返回正则表达式的字符串形式，只读")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("abc")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("gim")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修饰符相关属性")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ignoreCase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("global"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("multiline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//gim")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修饰符无关属性")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//abc")]),t._v("\n")])])]),a("h3",{attrs:{id:"实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[t._v("#")]),t._v(" 实例方法")]),t._v(" "),a("h4",{attrs:{id:"正则实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则实例方法"}},[t._v("#")]),t._v(" 正则实例方法")]),t._v(" "),a("p",[a("code",[t._v("**test()**")]),t._v("\n在字符串中测试是否匹配，返回值味 "),a("code",[t._v("true")]),t._v("或 "),a("code",[t._v("false")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("av")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"avbabc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),a("p",[t._v("当正则表达式带有"),a("code",[t._v("g")]),t._v("修饰符时，每一次"),a("code",[t._v("test")]),t._v("方法都会从上一次结束的位置开始向后匹配，可以使用"),a("code",[t._v("lastIndex")]),t._v("查看当前位置")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("av")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"avbavabc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),a("p",[t._v("如果正则表达式是一个空字符串，则匹配所有的字符串，都返回"),a("code",[t._v("true")]),t._v(" "),a("code",[t._v("**exec()**")]),t._v("\n在字符串中执行查找匹配的字符，返回一个数组，未匹配到返回"),a("code",[t._v("null")]),t._v(" "),a("code",[t._v("exec")]),t._v("方法返回数组包含两个属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("input")]),t._v("：整个原字符串")]),t._v(" "),a("li",[a("code",[t._v("index")]),t._v("：模式匹配成功的开始位置索引")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("av")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"avbavabc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["av", index: 0, input: "avbavabc", groups: undefined]')]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["av", index: 3, input: "avbavabc", groups: undefined]')]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//null")]),t._v("\n")])])]),a("p",[t._v("同 test 一样，当正则表达式带有"),a("code",[t._v("g")]),t._v("修饰符时，每一次"),a("code",[t._v("exec")]),t._v("方法都会从上一次结束的位置开始向后匹配，可以使用"),a("code",[t._v("lastIndex")]),t._v("查看当前位置\n当正则表达式包含"),a("code",[t._v("()")]),t._v("组匹配时，返回的数组包含多个匹配数据，第一个是整个正则匹配成功的结果，第二个为括号内的匹配结果，如果有多个括号，第三个为第二个括号内的匹配内容。依次类推。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a(v)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"avbavabc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[ 'av', 'v', index: 0, input: 'avbavabc', groups: undefined ]")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[ 'av', 'v', index: 3, input: 'avbavabc', groups: undefined ]")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//null")]),t._v("\n")])])]),a("p",[t._v("多个"),a("code",[t._v("()")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a(v)(b)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"avbavabc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'avb', 'v', 'b', index: 0, input: 'avbavabc', groups: undefined ]")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//null")]),t._v("\n")])])]),a("h4",{attrs:{id:"string-实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-实例方法"}},[t._v("#")]),t._v(" String 实例方法")]),t._v(" "),a("p",[a("code",[t._v("**match()**")]),t._v("\n在字符串中执行查找匹配的字符，返回一个数组，未匹配到返回"),a("code",[t._v("null")]),t._v("\n当正则表达式不带有"),a("code",[t._v("g")]),t._v("修饰符是，返回的数组带有"),a("code",[t._v("index")]),t._v("和"),a("code",[t._v("iuput")]),t._v("属性")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ac")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"acbacvabc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aabaavabc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[ 'ac', index: 0, input: 'acbacvabc', groups: undefined ]")]),t._v("\ns1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//null")]),t._v("\n")])])]),a("p",[t._v("正则表达式带有"),a("code",[t._v("g")]),t._v("修饰符时，该方法会一次性返回所有匹配成功的结果数组。不再带有"),a("code",[t._v("index")]),t._v("和"),a("code",[t._v("input")]),t._v("属性")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ac")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"acbacvabc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[ 'ac', 'ac' ]")]),t._v("\n")])])]),a("p",[t._v("注意：设置正则表达式的"),a("code",[t._v("lastindex")]),t._v("属性对"),a("code",[t._v("match")]),t._v("方法无效，"),a("code",[t._v("match")]),t._v("方法总是从字符串第一个开始匹配。\n"),a("strong",[a("code",[t._v("matchAll()")])]),t._v("\n在字符串中执行查找所有匹配的字符，返回一个迭代器。注意 ，在使用"),a("code",[t._v("matchAll")]),t._v("时，正则表达式需要带有"),a("code",[t._v("g")]),t._v("修饰符，否则会运行报错。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"acbacvabc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\narr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n[\n  [ 'a', index: 0, input: 'acbacvabc', groups: undefined ],\n  [ 'a', index: 3, input: 'acbacvabc', groups: undefined ],\n  [ 'a', index: 6, input: 'acbacvabc', groups: undefined ]\n]\n**/")]),t._v("\n")])])]),a("p",[a("code",[t._v("**search()**")]),t._v("\n在字符串中执行查找匹配的字符，返回第一个匹配到字符的位置，未匹配到返回-1")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("en")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("yo")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yuwenbo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-1")]),t._v("\n")])])]),a("p",[a("code",[t._v("**replace()**")]),t._v("\n在字符串中执行查找匹配的字符，并且使用替换字符串替换匹配到的子字符串。两个参数一个是正则表达式，一个是需要替换的内容。\n如果正则没有"),a("code",[t._v("g")]),t._v("修饰符，只替换第一个匹配成功的值。如果有"),a("code",[t._v("g")]),t._v("修饰符，则替换所有匹配成功的值。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i love you"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\s")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"❤"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//i❤love you")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\s")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"❤"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//i❤love❤you")]),t._v("\n")])])]),a("p",[a("code",[t._v("replace")]),t._v("第二个参数可以使用"),a("code",[t._v("$")]),t._v("符号，用来更加方便的制定所替换的内容")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("$&")]),t._v("：匹配的子字符串")]),t._v(" "),a("li",[t._v("`$``：匹配结果前面的文本")]),t._v(" "),a("li",[a("code",[t._v("$'")]),t._v("：匹配结果后面的文本")]),t._v(" "),a("li",[a("code",[t._v("$n")]),t._v("：匹配成功的第 n 组内容，n 是从 1 开始的自然数")]),t._v(" "),a("li",[a("code",[t._v("$$")]),t._v("：指代美元符号"),a("code",[t._v("$")])])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"he llo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\w+)\\s(\\w+)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$2 $1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//llo he")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-$`-$&-$\'-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//h-h-e-llo-llo")]),t._v("\n")])])]),a("p",[a("code",[t._v("replace")]),t._v("的第二个参数也可以作为一个函数，将每一个正则匹配内容替换为函数的返回值\n函数可以接受多个参数，第一个为匹配到的内容，后面为组匹配内容(可以有多个组匹配)，倒数第二个参数为匹配内容再字符串中的位置，倒数第一个参数为原字符串。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"❤"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//e 1 hello")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//h❤llo")]),t._v("\n")])])]),a("p",[a("code",[t._v("**split()**")]),t._v("\n使用正则表达式或者一个固定字符串分割一个字符串，并将分割后的子字符串存储到数组中\n该方法可接受两个参数，第一个参数为正则表达式，表示分割规则，第二个参数是返回数组的最大成员数")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ni hao ya.hei hei hei"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v(" |\\.")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[ 'ni', 'hao', 'ya', 'hei', 'hei' ]")]),t._v("\n")])])]),a("p",[a("strong",[t._v("总结：")]),t._v("\n判断字符串是否被匹配到，使用"),a("code",[t._v("test")]),t._v("或者"),a("code",[t._v("search")]),t._v("方法\n想获得更多的信息，使用"),a("code",[t._v("exec")]),t._v("或者，"),a("code",[t._v("match")]),t._v("方法，会比较慢。")]),t._v(" "),a("h3",{attrs:{id:"修饰符-标志符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符-标志符"}},[t._v("#")]),t._v(" 修饰符（标志符）")]),t._v(" "),a("p",[t._v("修饰符表示附加规则，放在正则模式的最尾部。可以单个使用，也可以一起使用。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//单个修饰符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abAbab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["a","a"]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//多个修饰符一起使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abAbab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("gi")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["a", "A", "a"]')]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("标志")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("g")])]),t._v(" "),a("td",[t._v("全局搜索")]),t._v(" "),a("td",[t._v("默认情况下只匹配一次，就停止像下匹配了，加上修饰符会一直向下搜索")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("i")])]),t._v(" "),a("td",[t._v("不区分大小写搜索")]),t._v(" "),a("td",[t._v("默认情况下会区分匹配字符串的大小写情况")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("m")])]),t._v(" "),a("td",[t._v("多行搜索")]),t._v(" "),a("td",[t._v("多行模式，会修改"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("的行为")])])])]),t._v(" "),a("p",[t._v("默认情况下，"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("匹配字符串的开始处和结尾处\n加上"),a("code",[t._v("m")]),t._v("修饰符，"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("还会匹配行首和行尾，即"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("会识别换行符"),a("code",[t._v("\\n")]),t._v(" "),a("code",[t._v("/yewen$/m.test('hi yuwen\\n')")]),t._v(" 为"),a("code",[t._v("true")]),t._v(" "),a("code",[t._v("/yewen$/.test('hi yuwen\\n')")]),t._v(" 为"),a("code",[t._v("false")]),t._v(" |\n| "),a("code",[t._v("s")]),t._v(" | 允许"),a("code",[t._v(".")]),t._v("匹配换行符 | - |\n| "),a("code",[t._v("u")]),t._v(" | 使用 unicode 码的模式进行匹配 | - |\n| "),a("code",[t._v("y")]),t._v(" | 执行 粘性搜索匹配从目标字符串的当前位置开始 | - |")]),t._v(" "),a("h3",{attrs:{id:"特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[t._v("#")]),t._v(" 特殊字符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("含义")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("\\")])]),t._v(" "),a("td",[t._v("转义字符")]),t._v(" "),a("td",[t._v("正则表达式中需要匹配特殊字符本身，需要再前面家反斜杠"),a("code",[t._v("\\")])])])])]),t._v(" "),a("p",[t._v("正则表达式中，需要反斜杠转义的：\n"),a("code",[t._v("^")]),t._v(","),a("code",[t._v(".")]),t._v(","),a("code",[t._v("[")]),t._v(","),a("code",[t._v("$")]),t._v(","),a("code",[t._v("(")]),t._v(","),a("code",[t._v(")")]),t._v(","),a("code",[t._v("|")]),t._v(","),a("code",[t._v("*")]),t._v(","),a("code",[t._v("+")]),t._v(","),a("code",[t._v("?")]),t._v(","),a("code",[t._v("{")]),t._v(","),a("code",[t._v("\\")]),t._v(" |\n| "),a("code",[t._v("^")]),t._v(" | 匹配开始位置 | 如果设置多行标志，那么也匹配换行符后的位置\n例如：\n"),a("code",[t._v("/^A/")]),t._v("会匹配 "),a("code",[t._v('"Ant"')]),t._v("中的"),a("code",[t._v("A")]),t._v("，但是不会匹配"),a("code",[t._v('"ntA"')]),t._v("中的"),a("code",[t._v("A")]),t._v(" |\n| "),a("code",[t._v("$")]),t._v(" | 匹配结束位置 | 如果设置多行标志，那么也匹配换行符前的位置\n例如：\n"),a("code",[t._v("/A$/")]),t._v("会匹配 "),a("code",[t._v('"ntA"')]),t._v("中的"),a("code",[t._v("A")]),t._v("，但是不会匹配"),a("code",[t._v('"Ant"')]),t._v("中的"),a("code",[t._v("A")]),t._v(" |\n| "),a("code",[t._v("*")]),t._v(" | 匹配一个表达式 0 次或多次 | 等价于 "),a("code",[t._v("{0, }")]),t._v("\n例如：\n"),a("code",[t._v("/yueno*/")]),t._v("会匹配 "),a("code",[t._v('"yuenoooyuen"')]),t._v("中的"),a("code",[t._v("yuenooo")]),t._v("和"),a("code",[t._v("yuen")]),t._v(" |\n| "),a("code",[t._v("+")]),t._v(" | 匹配一个表达式 1 次或多次 | 等价于 "),a("code",[t._v("{1, }")]),t._v("\n例如：\n"),a("code",[t._v("/yueno+/")]),t._v("只会匹配 "),a("code",[t._v('"yuenoooyuen"')]),t._v("中的"),a("code",[t._v("yuenooo")]),t._v(" |\n| "),a("code",[t._v("?")]),t._v(" | 匹配一个表达式 0 次或 1 次 | 等价于"),a("code",[t._v("{0,1}")]),t._v("\n例如：\n"),a("code",[t._v("/yueno?/")]),t._v("只会匹配 "),a("code",[t._v('"yuenoooyuen"')]),t._v("中的"),a("code",[t._v("yueno")]),t._v("\n注意：\n"),a("code",[t._v("?")]),t._v("如果紧跟再任何量词 "),a("code",[t._v("*")]),t._v("、"),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("?")]),t._v("或"),a("code",[t._v("{}")]),t._v("的后面，将会使量词变得非贪婪（匹配尽量少的字符）\n例如：\n"),a("code",[t._v("/yueno??/")]),t._v("只会匹配 "),a("code",[t._v('"yuenoooyuen"')]),t._v("中的"),a("code",[t._v("yuen")]),t._v(" |\n| "),a("code",[t._v(".")]),t._v(" | 默认匹配出换行符之外的任何单个字符 | 例如：\n"),a("code",[t._v("/.y/")]),t._v("只会匹配 "),a("code",[t._v('"yuenoooyuen"')]),t._v("中的"),a("code",[t._v("oy")]),t._v(" "),a("code",[t._v("/..y/")]),t._v("只会匹配 "),a("code",[t._v('"yuenoooyuen"')]),t._v("中的"),a("code",[t._v("ooy")]),t._v(" |\n| "),a("code",[t._v("(x)")]),t._v(" | 捕获括号 | 正则表达式中的括号表示分组匹配，括号中的模式可以用匹配分组的内容\n分组匹配可以使用"),a("code",[t._v("\\n")]),t._v("\n例如：\n"),a("code",[t._v("/(wenbo)+/.test('wenbowenbo')")]),t._v(" 为"),a("code",[t._v("true")]),t._v("，表示匹配"),a("code",[t._v("wenbo")]),t._v("整体一次或多次\n正则替换中，可以使用"),a("code",[t._v("$1")]),t._v(","),a("code",[t._v("$2")]),t._v("语法\n例如：\n"),a("code",[t._v("\"wenbo,zhijian\".replace(/(wenbo),(zhijian)/, '$2,$1')")])]),t._v(" "),a("p",[t._v("输出为："),a("code",[t._v("zhijian,wenbo")]),t._v(" |\n| "),a("code",[t._v("(?:x)")]),t._v(" | 匹配"),a("code",[t._v("X")]),t._v("但是不记住匹配项 | 非捕获括号，使你能够定义与正则表达式运算符一起使用的子表达式\n使用非捕获括号，能匹配元素，但是不能在使用"),a("code",[t._v("\\n")]),t._v("和"),a("code",[t._v("$n")]),t._v("方法 |\n| "),a("code",[t._v("x(?=y)")]),t._v(" | 匹配"),a("code",[t._v("x")]),t._v("，仅仅当"),a("code",[t._v("x")]),t._v("后面是"),a("code",[t._v("y")]),t._v(" | 先行断言\n例如：\n"),a("code",[t._v("'wenbo'.match(/wen(?=bo)/)")]),t._v("\n输出："),a("code",[t._v("[ 'wen', index: 0, input: 'wenbo', groups: undefined ]")]),t._v(" "),a("code",[t._v("'wenyu'.match(/wen(?=bo)/)")]),t._v("\n输出：null |\n| "),a("code",[t._v("(?<=y)x")]),t._v(" | 匹配"),a("code",[t._v("x")]),t._v("，仅仅当"),a("code",[t._v("x")]),t._v("前面是"),a("code",[t._v("y")]),t._v(" | 后行断言\n例如：\n"),a("code",[t._v("'wenbo'.match(/(?<=wen)bo/)")]),t._v("\n输出："),a("code",[t._v("[ 'bo', index: 3, input: 'wenbo', groups: undefined ]")]),t._v(" "),a("code",[t._v("'yubo'.match(/(?<=wen)bo/)")]),t._v("\n输出：null |\n| "),a("code",[t._v("x(?!y)")]),t._v(" | 匹配"),a("code",[t._v("x")]),t._v("，仅仅当"),a("code",[t._v("x")]),t._v("后面不是"),a("code",[t._v("y")]),t._v("时 | 正向否定查找\n|\n| "),a("code",[t._v("(?<=y)x")]),t._v(" | 匹配"),a("code",[t._v("x")]),t._v("，仅仅当"),a("code",[t._v("x")]),t._v("前面不是"),a("code",[t._v("y")]),t._v(" | 反向否定查找\n|\n| "),a("code",[t._v("x|y")]),t._v(" | 匹配"),a("code",[t._v("x")]),t._v("或者"),a("code",[t._v("y")]),t._v(" | 或者，可以连用\n例如：\n"),a("code",[t._v("'wenyu'.match(/w|e|n/g)")]),t._v("\n输出："),a("code",[t._v("[ 'w', 'e', 'n' ]")]),t._v(" |\n| "),a("code",[t._v("{n}")]),t._v(" | 匹配前面一个字符刚好出现"),a("code",[t._v("n")]),t._v("次，"),a("code",[t._v("n")]),t._v("是一个正整数 |\n例如：\n"),a("code",[t._v("'hello'.match(/l{2}/g)")]),t._v("\n输出："),a("code",[t._v("[ 'll' ]")]),t._v(" |\n| "),a("code",[t._v("{n,}")]),t._v(" | 匹配一个字符至少出现了"),a("code",[t._v("n")]),t._v("次，"),a("code",[t._v("n")]),t._v("是一个正整数 | - |\n| "),a("code",[t._v("{n,m}")]),t._v(" | 匹配前面的字符至少"),a("code",[t._v("n")]),t._v("次最多"),a("code",[t._v("m")]),t._v("次，"),a("code",[t._v("n")]),t._v("，"),a("code",[t._v("m")]),t._v("是为正整数 | - |\n| "),a("code",[t._v("[xyz]")]),t._v(" | 字符集合\n| 匹配方括号中的任意字符，包括转义字符，可以使用破折号(-)制定一个字符范围,例如："),a("code",[t._v("[a-zA-Z1-9]")]),t._v("\n例如：\n"),a("code",[t._v("'hello 123'.match(/[a-h1-2]/g)")]),t._v("\n输出：\n"),a("code",[t._v("[ 'h', 'e', '1', '2' ]")]),t._v(" |\n| "),a("code",[t._v("[^xyz]")]),t._v(" | 反向字符集 | 匹配任何没有包含再方括号中的字符\n例如：\n"),a("code",[t._v("'hello 123'.match(/[^a-h1-2]/g)")]),t._v("\n输出："),a("code",[t._v("[ 'l', 'l', 'o', '3' ]")]),t._v(" |\n| "),a("code",[t._v("[\\b]")]),t._v(" | 匹配一个退格(U+0008) | 不是"),a("code",[t._v("\\b")]),t._v("，不要弄混了 |\n| "),a("code",[t._v("\\b")]),t._v(" | 匹配一个词的边界 | "),a("code",[t._v("/\\bworld/.test('hello world') // true")]),t._v(" "),a("code",[t._v("/\\bworld/.test('hello-world') // true")]),t._v(" "),a("code",[t._v("/\\bworld/.test('helloworld') // false")]),t._v(" |\n| "),a("code",[t._v("\\B")]),t._v(" | 匹配一个非单词边界 | "),a("code",[t._v("/\\bworld/.test('hello world') // false")]),t._v(" "),a("code",[t._v("/\\bworld/.test('hello-world') // false")]),t._v(" "),a("code",[t._v("/\\bworld/.test('helloworld') // true")]),t._v(" |\n| "),a("code",[t._v("\\cX")]),t._v(" | 当 X 是出于 A 到 Z 之间字符的时候，匹配字符串中的一个控制符 | - |\n| "),a("code",[t._v("\\d")]),t._v(" | 匹配一个数字 | 等价于"),a("code",[t._v("[0-9]")]),t._v(" |\n| "),a("code",[t._v("\\D")]),t._v(" | 匹配一个非数字字符 | 等价于"),a("code",[t._v("[^0-9]")]),t._v(" |\n| "),a("code",[t._v("\\f")]),t._v(" | 匹配一个换页符(U+000C) | - |\n| "),a("code",[t._v("\\n")]),t._v(" | 匹配一个换行符(U+000A) | - |\n| "),a("code",[t._v("\\r")]),t._v(" | 匹配一个回车符 | - |\n| "),a("code",[t._v("\\s")]),t._v(" | 匹配一个空白字符 | 包括空格，制表符，换页符，和换行符\n等价于\n"),a("code",[t._v("[``\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff``]")]),t._v(" |\n| "),a("code",[t._v("\\S")]),t._v(" | 匹配一个非空白字符 | - |\n| "),a("code",[t._v("\\t")]),t._v(" | 匹配一个水平制表符 | - |\n| "),a("code",[t._v("\\v")]),t._v(" | 匹配一个垂直制表符 | - |\n| "),a("code",[t._v("\\w")]),t._v("\n| 匹配一个单字字符（字母，数字或者下划线） | 等价于"),a("code",[t._v("[A-Za-z0-9_]")]),t._v(" |\n| "),a("code",[t._v("\\W")]),t._v("\n| 匹配一个非单字字符 | - |\n| "),a("code",[t._v("\\n")]),t._v(" | 返回最后的第 n 个字捕获匹配的子字符串 | 捕获的数目以左括号计算 |\n| "),a("code",[t._v("\\0")]),t._v(" | 匹配 NULL 字符（U+0000） | - |\n| "),a("code",[t._v("\\xhh")]),t._v(" | 匹配一个两位十六进制数表示的字符（\\x00-\\xFF） | - |\n| "),a("code",[t._v("\\uhhhh")]),t._v(" | 匹配一个四位十六进制数表示的 UTF-16 代码单元 | - |\n| "),a("code",[t._v("\\u{hhhh}")]),t._v("\n或\n"),a("code",[t._v("\\u{hhhhh}")]),t._v(" | （仅当设置了 U 标志时）匹配一个十六进制时候表示的 Unicode 字符 | - |")])])}),[],!1,null,null,null);s.default=n.exports}}]);