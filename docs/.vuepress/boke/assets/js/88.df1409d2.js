(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{518:function(t,e,a){"use strict";a.r(e);var s=a(53),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"get-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-stream"}},[t._v("#")]),t._v(" get-stream")]),t._v(" "),a("blockquote",[a("p",[t._v("Get a stream as a string, buffer, or array")])]),t._v(" "),a("h2",{attrs:{id:"install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install"}},[t._v("#")]),t._v(" Install")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ npm install get-stream\n")])])]),a("h2",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" getStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get-stream'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'unicorn.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n\t              ,,))))))));,\n\t           __)))))))))))))),\n\t\\|/       -\\(((((''''((((((((.\n\t-*-==//////((''  .     `)))))),\n\t/|\\      ))| o    ;-.    '(((((                                  ,(,\n\t         ( `|    /  )    ;))))'                               ,_))^;(~\n\t            |   |   |   ,))((((_     _____------~~~-.        %,;(;(>';'~\n\t            o_);   ;    )))(((` ~---~  `::           \\      %%~~)(v;(`('~\n\t                  ;    ''''````         `:       `:::|\\,__,%%    );`'; ~\n\t                 |   _                )     /      `:|`----'     `-'\n\t           ______/\\/~    |                 /        /\n\t         /~;;.____/;;'  /          ___--,-(   `;;;/\n\t        / //  _;______;'------~~~~~    /;;/\\    /\n\t       //  | |                        / ;   \\;;,\\\n\t      (<_  | ;                      /',/-----'  _>\n\t       \\_| ||_                     //~;~~~~~~~~~\n\t           `\\_|                   (,~~\n\t                                   \\~\\\n\t                                    ~~\n\t*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),a("p",[t._v("The methods returns a promise that resolves when the "),a("code",[t._v("end")]),t._v(" event fires on the stream, indicating that there is no more data to be read. The stream is switched to flowing mode.")]),t._v(" "),a("h3",{attrs:{id:"getstream-stream-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getstream-stream-options"}},[t._v("#")]),t._v(" getStream(stream, options?)")]),t._v(" "),a("p",[t._v("Get the "),a("code",[t._v("stream")]),t._v(" as a string.")]),t._v(" "),a("h4",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" options")]),t._v(" "),a("p",[t._v("Type: "),a("code",[t._v("object")])]),t._v(" "),a("h5",{attrs:{id:"encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#encoding"}},[t._v("#")]),t._v(" encoding")]),t._v(" "),a("p",[t._v("Type: "),a("code",[t._v("string")]),a("br"),t._v("\nDefault: "),a("code",[t._v("'utf8'")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://nodejs.org/api/buffer.html#buffer_buffer",target:"_blank",rel:"noopener noreferrer"}},[t._v("Encoding"),a("OutboundLink")],1),t._v(" of the incoming stream.")]),t._v(" "),a("h5",{attrs:{id:"maxbuffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maxbuffer"}},[t._v("#")]),t._v(" maxBuffer")]),t._v(" "),a("p",[t._v("Type: "),a("code",[t._v("number")]),a("br"),t._v("\nDefault: "),a("code",[t._v("Infinity")])]),t._v(" "),a("p",[t._v("Maximum length of the returned string. If it exceeds this value before the stream ends, the promise will be rejected with a "),a("code",[t._v("getStream.MaxBufferError")]),t._v(" error.")]),t._v(" "),a("h3",{attrs:{id:"getstream-buffer-stream-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getstream-buffer-stream-options"}},[t._v("#")]),t._v(" getStream.buffer(stream, options?)")]),t._v(" "),a("p",[t._v("Get the "),a("code",[t._v("stream")]),t._v(" as a buffer.")]),t._v(" "),a("p",[t._v("It honors the "),a("code",[t._v("maxBuffer")]),t._v(" option as above, but it refers to byte length rather than string length.")]),t._v(" "),a("h3",{attrs:{id:"getstream-array-stream-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getstream-array-stream-options"}},[t._v("#")]),t._v(" getStream.array(stream, options?)")]),t._v(" "),a("p",[t._v("Get the "),a("code",[t._v("stream")]),t._v(" as an array of values.")]),t._v(" "),a("p",[t._v("It honors both the "),a("code",[t._v("maxBuffer")]),t._v(" and "),a("code",[t._v("encoding")]),t._v(" options. The behavior changes slightly based on the encoding chosen:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("When "),a("code",[t._v("encoding")]),t._v(" is unset, it assumes an "),a("a",{attrs:{href:"https://nodesource.com/blog/understanding-object-streams/",target:"_blank",rel:"noopener noreferrer"}},[t._v("object mode stream"),a("OutboundLink")],1),t._v(" and collects values emitted from "),a("code",[t._v("stream")]),t._v(" unmodified. In this case "),a("code",[t._v("maxBuffer")]),t._v(" refers to the number of items in the array (not the sum of their sizes).")])]),t._v(" "),a("li",[a("p",[t._v("When "),a("code",[t._v("encoding")]),t._v(" is set to "),a("code",[t._v("buffer")]),t._v(", it collects an array of buffers. "),a("code",[t._v("maxBuffer")]),t._v(" refers to the summed byte lengths of every buffer in the array.")])]),t._v(" "),a("li",[a("p",[t._v("When "),a("code",[t._v("encoding")]),t._v(" is set to anything else, it collects an array of strings. "),a("code",[t._v("maxBuffer")]),t._v(" refers to the summed character lengths of every string in the array.")])])]),t._v(" "),a("h2",{attrs:{id:"errors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#errors"}},[t._v("#")]),t._v(" Errors")]),t._v(" "),a("p",[t._v("If the input stream emits an "),a("code",[t._v("error")]),t._v(" event, the promise will be rejected with the error. The buffered data will be attached to the "),a("code",[t._v("bufferedData")]),t._v(" property of the error.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("streamThatErrorsAtTheEnd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'unicorn'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bufferedData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=> 'unicorn'")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"faq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#faq"}},[t._v("#")]),t._v(" FAQ")]),t._v(" "),a("h3",{attrs:{id:"how-is-this-different-from-concat-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-is-this-different-from-concat-stream"}},[t._v("#")]),t._v(" How is this different from "),a("a",{attrs:{href:"https://github.com/maxogden/concat-stream",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("concat-stream")]),a("OutboundLink")],1),t._v("?")]),t._v(" "),a("p",[t._v("This module accepts a stream instead of being one and returns a promise instead of using a callback. The API is simpler and it only supports returning a string, buffer, or array. It doesn't have a fragile type inference. You explicitly choose what you want. And it doesn't depend on the huge "),a("code",[t._v("readable-stream")]),t._v(" package.")]),t._v(" "),a("h2",{attrs:{id:"related"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#related"}},[t._v("#")]),t._v(" Related")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/sindresorhus/get-stdin",target:"_blank",rel:"noopener noreferrer"}},[t._v("get-stdin"),a("OutboundLink")],1),t._v(" - Get stdin as a string or buffer")])]),t._v(" "),a("hr"),t._v(" "),a("div",{attrs:{align:"center"}},[a("b",[a("a",{attrs:{href:"https://tidelift.com/subscription/pkg/npm-get-stream?utm_source=npm-get-stream&utm_medium=referral&utm_campaign=readme"}},[t._v("Get professional support for this package with a Tidelift subscription")])]),t._v(" "),a("br"),t._v(" "),a("sub",[t._v("\n\t\tTidelift helps make open source sustainable for maintainers while giving companies"),a("br"),t._v("assurances about security, maintenance, and licensing for their dependencies.\n\t")])])])}),[],!1,null,null,null);e.default=r.exports}}]);