(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{479:function(t,e,n){"use strict";n.r(e);var s=n(53),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"acorn"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#acorn"}},[t._v("#")]),t._v(" Acorn")]),t._v(" "),n("p",[t._v("A tiny, fast JavaScript parser written in JavaScript.")]),t._v(" "),n("h2",{attrs:{id:"community"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#community"}},[t._v("#")]),t._v(" Community")]),t._v(" "),n("p",[t._v("Acorn is open source software released under an\n"),n("a",{attrs:{href:"https://github.com/acornjs/acorn/blob/master/acorn/LICENSE",target:"_blank",rel:"noopener noreferrer"}},[t._v("MIT license"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("p",[t._v("You are welcome to\n"),n("a",{attrs:{href:"https://github.com/acornjs/acorn/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("report bugs"),n("OutboundLink")],1),t._v(" or create pull\nrequests on "),n("a",{attrs:{href:"https://github.com/acornjs/acorn",target:"_blank",rel:"noopener noreferrer"}},[t._v("github"),n("OutboundLink")],1),t._v(". For questions\nand discussion, please use the\n"),n("a",{attrs:{href:"https://discuss.ternjs.net",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tern discussion forum"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"installation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),n("p",[t._v("The easiest way to install acorn is from "),n("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("npm")]),n("OutboundLink")],1),t._v(":")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" acorn\n")])])]),n("p",[t._v("Alternately, you can download the source and build acorn yourself:")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/acornjs/acorn.git\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" acorn\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),n("h2",{attrs:{id:"interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#interface"}},[t._v("#")]),t._v(" Interface")]),t._v(" "),n("p",[n("strong",[t._v("parse")]),n("code",[t._v("(input, options)")]),t._v(" is the main interface to the library. The\n"),n("code",[t._v("input")]),t._v(" parameter is a string, "),n("code",[t._v("options")]),t._v(" must be an object setting\nsome of the options listed below. The return value will be an abstract\nsyntax tree object as specified by the "),n("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESTree\nspec"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" acorn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"acorn"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("acorn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1 + 1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ecmaVersion"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("When encountering a syntax error, the parser will raise a\n"),n("code",[t._v("SyntaxError")]),t._v(" object with a meaningful message. The error object will\nhave a "),n("code",[t._v("pos")]),t._v(" property that indicates the string offset at which the\nerror occurred, and a "),n("code",[t._v("loc")]),t._v(" object that contains a "),n("code",[t._v("{line, column}")]),t._v("\nobject referring to that same position.")]),t._v(" "),n("p",[t._v("Options are provided by in a second argument, which should be an\nobject containing any of these fields (only "),n("code",[t._v("ecmaVersion")]),t._v(" is\nrequired):")]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("ecmaVersion")]),t._v(": Indicates the ECMAScript version to parse. Must be\neither 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10 (2019),\n11 (2020), 12 (2021, partial support), 13 (2022, partial support)\nor "),n("code",[t._v('"latest"')]),t._v(" (the latest the library supports). This influences\nsupport for strict mode, the set of reserved words, and support\nfor new syntax features.")]),t._v(" "),n("p",[n("strong",[t._v("NOTE")]),t._v(": Only 'stage 4' (finalized) ECMAScript features are being\nimplemented by Acorn. Other proposed new features must be\nimplemented through plugins.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("sourceType")]),t._v(": Indicate the mode the code should be parsed in. Can be\neither "),n("code",[t._v('"script"')]),t._v(" or "),n("code",[t._v('"module"')]),t._v(". This influences global strict mode\nand parsing of "),n("code",[t._v("import")]),t._v(" and "),n("code",[t._v("export")]),t._v(" declarations.")]),t._v(" "),n("p",[n("strong",[t._v("NOTE")]),t._v(": If set to "),n("code",[t._v('"module"')]),t._v(", then static "),n("code",[t._v("import")]),t._v(" / "),n("code",[t._v("export")]),t._v(" syntax\nwill be valid, even if "),n("code",[t._v("ecmaVersion")]),t._v(" is less than 6.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("onInsertedSemicolon")]),t._v(": If given a callback, that callback will be\ncalled whenever a missing semicolon is inserted by the parser. The\ncallback will be given the character offset of the point where the\nsemicolon is inserted as argument, and if "),n("code",[t._v("locations")]),t._v(" is on, also a\n"),n("code",[t._v("{line, column}")]),t._v(" object representing this position.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("onTrailingComma")]),t._v(": Like "),n("code",[t._v("onInsertedSemicolon")]),t._v(", but for trailing\ncommas.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("allowReserved")]),t._v(": If "),n("code",[t._v("false")]),t._v(", using a reserved word will generate\nan error. Defaults to "),n("code",[t._v("true")]),t._v(" for "),n("code",[t._v("ecmaVersion")]),t._v(" 3, "),n("code",[t._v("false")]),t._v(" for higher\nversions. When given the value "),n("code",[t._v('"never"')]),t._v(", reserved words and\nkeywords can also not be used as property names (as in Internet\nExplorer's old parser).")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("allowReturnOutsideFunction")]),t._v(": By default, a return statement at\nthe top level raises an error. Set this to "),n("code",[t._v("true")]),t._v(" to accept such\ncode.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("allowImportExportEverywhere")]),t._v(": By default, "),n("code",[t._v("import")]),t._v(" and "),n("code",[t._v("export")]),t._v("\ndeclarations can only appear at a program's top level. Setting this\noption to "),n("code",[t._v("true")]),t._v(" allows them anywhere where a statement is allowed,\nand also allows "),n("code",[t._v("import.meta")]),t._v(" expressions to appear in scripts\n(when "),n("code",[t._v("sourceType")]),t._v(" is not "),n("code",[t._v('"module"')]),t._v(").")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("allowAwaitOutsideFunction")]),t._v(": If "),n("code",[t._v("false")]),t._v(", "),n("code",[t._v("await")]),t._v(" expressions can\nonly appear inside "),n("code",[t._v("async")]),t._v(" functions. Defaults to "),n("code",[t._v("true")]),t._v(" for\n"),n("code",[t._v("ecmaVersion")]),t._v(" 2022 and later, "),n("code",[t._v("false")]),t._v(" for lower versions. Setting this option to\n"),n("code",[t._v("true")]),t._v(" allows to have top-level "),n("code",[t._v("await")]),t._v(" expressions. They are\nstill not allowed in non-"),n("code",[t._v("async")]),t._v(" functions, though.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("allowSuperOutsideMethod")]),t._v(": By default, "),n("code",[t._v("super")]),t._v(" outside a method\nraises an error. Set this to "),n("code",[t._v("true")]),t._v(" to accept such code.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("allowHashBang")]),t._v(": When this is enabled (off by default), if the\ncode starts with the characters "),n("code",[t._v("#!")]),t._v(" (as in a shellscript), the\nfirst line will be treated as a comment.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("locations")]),t._v(": When "),n("code",[t._v("true")]),t._v(", each node has a "),n("code",[t._v("loc")]),t._v(" object attached\nwith "),n("code",[t._v("start")]),t._v(" and "),n("code",[t._v("end")]),t._v(" subobjects, each of which contains the\none-based line and zero-based column numbers in "),n("code",[t._v("{line, column}")]),t._v("\nform. Default is "),n("code",[t._v("false")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("onToken")]),t._v(": If a function is passed for this option, each found\ntoken will be passed in same format as tokens returned from\n"),n("code",[t._v("tokenizer().getToken()")]),t._v(".")]),t._v(" "),n("p",[t._v("If array is passed, each found token is pushed to it.")]),t._v(" "),n("p",[t._v("Note that you are not allowed to call the parser from the\ncallback—that will corrupt its internal state.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("onComment")]),t._v(": If a function is passed for this option, whenever a\ncomment is encountered the function will be called with the\nfollowing parameters:")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("block")]),t._v(": "),n("code",[t._v("true")]),t._v(" if the comment is a block comment, false if it\nis a line comment.")]),t._v(" "),n("li",[n("code",[t._v("text")]),t._v(": The content of the comment.")]),t._v(" "),n("li",[n("code",[t._v("start")]),t._v(": Character offset of the start of the comment.")]),t._v(" "),n("li",[n("code",[t._v("end")]),t._v(": Character offset of the end of the comment.")])]),t._v(" "),n("p",[t._v("When the "),n("code",[t._v("locations")]),t._v(" options is on, the "),n("code",[t._v("{line, column}")]),t._v(" locations\nof the comment’s start and end are passed as two additional\nparameters.")]),t._v(" "),n("p",[t._v("If array is passed for this option, each found comment is pushed\nto it as object in Esprima format:")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Line"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Block"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"comment text"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"end"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If `locations` option is on:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"loc"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("line"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"end"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("line"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If `ranges` option is on:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"range"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("Note that you are not allowed to call the parser from the\ncallback—that will corrupt its internal state.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("ranges")]),t._v(": Nodes have their start and end characters offsets\nrecorded in "),n("code",[t._v("start")]),t._v(" and "),n("code",[t._v("end")]),t._v(" properties (directly on the node,\nrather than the "),n("code",[t._v("loc")]),t._v(" object, which holds line/column data. To also\nadd a\n"),n("a",{attrs:{href:"https://bugzilla.mozilla.org/show_bug.cgi?id=745678",target:"_blank",rel:"noopener noreferrer"}},[t._v("semi-standardized"),n("OutboundLink")],1),t._v(" "),n("code",[t._v("range")]),t._v(" property holding a "),n("code",[t._v("[start, end]")]),t._v(" array with the same\nnumbers, set the "),n("code",[t._v("ranges")]),t._v(" option to "),n("code",[t._v("true")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("program")]),t._v(": It is possible to parse multiple files into a single\nAST by passing the tree produced by parsing the first file as the\n"),n("code",[t._v("program")]),t._v(' option in subsequent parses. This will add the toplevel\nforms of the parsed file to the "Program" (top) node of an existing\nparse tree.')])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("sourceFile")]),t._v(": When the "),n("code",[t._v("locations")]),t._v(" option is "),n("code",[t._v("true")]),t._v(", you can pass\nthis option to add a "),n("code",[t._v("source")]),t._v(" attribute in every node’s "),n("code",[t._v("loc")]),t._v("\nobject. Note that the contents of this option are not examined or\nprocessed in any way; you are free to use whatever format you\nchoose.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("directSourceFile")]),t._v(": Like "),n("code",[t._v("sourceFile")]),t._v(", but a "),n("code",[t._v("sourceFile")]),t._v(" property\nwill be added (regardless of the "),n("code",[t._v("location")]),t._v(" option) directly to the\nnodes, rather than the "),n("code",[t._v("loc")]),t._v(" object.")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("preserveParens")]),t._v(": If this option is "),n("code",[t._v("true")]),t._v(", parenthesized expressions\nare represented by (non-standard) "),n("code",[t._v("ParenthesizedExpression")]),t._v(" nodes\nthat have a single "),n("code",[t._v("expression")]),t._v(" property containing the expression\ninside parentheses.")])])]),t._v(" "),n("p",[n("strong",[t._v("parseExpressionAt")]),n("code",[t._v("(input, offset, options)")]),t._v(" will parse a single\nexpression in a string, and return its AST. It will not complain if\nthere is more of the string left after the expression.")]),t._v(" "),n("p",[n("strong",[t._v("tokenizer")]),n("code",[t._v("(input, options)")]),t._v(" returns an object with a "),n("code",[t._v("getToken")]),t._v("\nmethod that can be called repeatedly to get the next token, a "),n("code",[t._v("{start, end, type, value}")]),t._v(" object (with added "),n("code",[t._v("loc")]),t._v(" property when the\n"),n("code",[t._v("locations")]),t._v(" option is enabled and "),n("code",[t._v("range")]),t._v(" property when the "),n("code",[t._v("ranges")]),t._v("\noption is enabled). When the token's type is "),n("code",[t._v("tokTypes.eof")]),t._v(", you\nshould stop calling the method, since it will keep returning that same\ntoken forever.")]),t._v(" "),n("p",[t._v("In ES6 environment, returned result can be used as any other\nprotocol-compliant iterable:")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" token "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" acorn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("tokenizer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// iterate over the tokens")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// transform code to array of tokens:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tokens "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("acorn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("tokenizer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("strong",[t._v("tokTypes")]),t._v(" holds an object mapping names to the token type objects\nthat end up in the "),n("code",[t._v("type")]),t._v(" properties of tokens.")]),t._v(" "),n("p",[n("strong",[t._v("getLineInfo")]),n("code",[t._v("(input, offset)")]),t._v(" can be used to get a "),n("code",[t._v("{line, column}")]),t._v(" object for a given program string and offset.")]),t._v(" "),n("h3",{attrs:{id:"the-parser-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-parser-class"}},[t._v("#")]),t._v(" The "),n("code",[t._v("Parser")]),t._v(" class")]),t._v(" "),n("p",[t._v("Instances of the "),n("strong",[n("code",[t._v("Parser")])]),t._v(" class contain all the state and logic\nthat drives a parse. It has static methods "),n("code",[t._v("parse")]),t._v(",\n"),n("code",[t._v("parseExpressionAt")]),t._v(", and "),n("code",[t._v("tokenizer")]),t._v(" that match the top-level\nfunctions by the same name.")]),t._v(" "),n("p",[t._v("When extending the parser with plugins, you need to call these methods\non the extended version of the class. To extend a parser with plugins,\nyou can use its static "),n("code",[t._v("extend")]),t._v(" method.")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" acorn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"acorn"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" jsx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"acorn-jsx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" JSXParser "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acorn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Parser"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("extend")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("jsx")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nJSXParser"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo(<bar/>)"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ecmaVersion"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("The "),n("code",[t._v("extend")]),t._v(" method takes any number of plugin values, and returns a\nnew "),n("code",[t._v("Parser")]),t._v(" class that includes the extra parser logic provided by\nthe plugins.")]),t._v(" "),n("h2",{attrs:{id:"command-line-interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#command-line-interface"}},[t._v("#")]),t._v(" Command line interface")]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("bin/acorn")]),t._v(" utility can be used to parse a file from the command\nline. It accepts as arguments its input file and the following\noptions:")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("--ecma3|--ecma5|--ecma6|--ecma7|--ecma8|--ecma9|--ecma10")]),t._v(": Sets the ECMAScript version\nto parse. Default is version 9.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--module")]),t._v(": Sets the parsing mode to "),n("code",[t._v('"module"')]),t._v(". Is set to "),n("code",[t._v('"script"')]),t._v(" otherwise.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--locations")]),t._v(': Attaches a "loc" object to each node with "start" and\n"end" subobjects, each of which contains the one-based line and\nzero-based column numbers in '),n("code",[t._v("{line, column}")]),t._v(" form.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--allow-hash-bang")]),t._v(": If the code starts with the characters #! (as\nin a shellscript), the first line will be treated as a comment.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--allow-await-outside-function")]),t._v(": Allows top-level "),n("code",[t._v("await")]),t._v(" expressions.\nSee the "),n("code",[t._v("allowAwaitOutsideFunction")]),t._v(" option for more information.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--compact")]),t._v(": No whitespace is used in the AST output.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--silent")]),t._v(": Do not output the AST, just return the exit status.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--help")]),t._v(": Print the usage information and quit.")])])]),t._v(" "),n("p",[t._v("The utility spits out the syntax tree as JSON data.")]),t._v(" "),n("h2",{attrs:{id:"existing-plugins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#existing-plugins"}},[t._v("#")]),t._v(" Existing plugins")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/RReverser/acorn-jsx",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("acorn-jsx")]),n("OutboundLink")],1),t._v(": Parse "),n("a",{attrs:{href:"https://github.com/facebook/jsx",target:"_blank",rel:"noopener noreferrer"}},[t._v("Facebook JSX syntax extensions"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("Plugins for ECMAScript proposals:")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/acornjs/acorn-stage3",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("acorn-stage3")]),n("OutboundLink")],1),t._v(": Parse most stage 3 proposals, bundling:\n"),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/acornjs/acorn-class-fields",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("acorn-class-fields")]),n("OutboundLink")],1),t._v(": Parse "),n("a",{attrs:{href:"https://github.com/tc39/proposal-class-fields",target:"_blank",rel:"noopener noreferrer"}},[t._v("class fields proposal"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/acornjs/acorn-import-meta",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("acorn-import-meta")]),n("OutboundLink")],1),t._v(": Parse "),n("a",{attrs:{href:"https://github.com/tc39/proposal-import-meta",target:"_blank",rel:"noopener noreferrer"}},[t._v("import.meta proposal"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/acornjs/acorn-private-methods",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("acorn-private-methods")]),n("OutboundLink")],1),t._v(": parse "),n("a",{attrs:{href:"https://github.com/tc39/proposal-private-methods",target:"_blank",rel:"noopener noreferrer"}},[t._v("private methods, getters and setters proposal"),n("OutboundLink")],1),t._v("n")])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);