(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{522:function(e,a,t){"use strict";t.r(a);var s=t(53),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"graceful-fs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graceful-fs"}},[e._v("#")]),e._v(" graceful-fs")]),e._v(" "),t("p",[e._v("graceful-fs functions as a drop-in replacement for the fs module,\nmaking various improvements.")]),e._v(" "),t("p",[e._v("The improvements are meant to normalize behavior across different\nplatforms and environments, and to make filesystem access more\nresilient to errors.")]),e._v(" "),t("h2",{attrs:{id:"improvements-over-fs-module"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#improvements-over-fs-module"}},[e._v("#")]),e._v(" Improvements over "),t("a",{attrs:{href:"https://nodejs.org/api/fs.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("fs module"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[e._v("Queues up "),t("code",[e._v("open")]),e._v(" and "),t("code",[e._v("readdir")]),e._v(" calls, and retries them once\nsomething closes if there is an EMFILE error from too many file\ndescriptors.")]),e._v(" "),t("li",[e._v("fixes "),t("code",[e._v("lchmod")]),e._v(" for Node versions prior to 0.6.2.")]),e._v(" "),t("li",[e._v("implements "),t("code",[e._v("fs.lutimes")]),e._v(" if possible. Otherwise it becomes a noop.")]),e._v(" "),t("li",[e._v("ignores "),t("code",[e._v("EINVAL")]),e._v(" and "),t("code",[e._v("EPERM")]),e._v(" errors in "),t("code",[e._v("chown")]),e._v(", "),t("code",[e._v("fchown")]),e._v(" or\n"),t("code",[e._v("lchown")]),e._v(" if the user isn't root.")]),e._v(" "),t("li",[e._v("makes "),t("code",[e._v("lchmod")]),e._v(" and "),t("code",[e._v("lchown")]),e._v(" become noops, if not available.")]),e._v(" "),t("li",[e._v("retries reading a file if "),t("code",[e._v("read")]),e._v(" results in EAGAIN error.")])]),e._v(" "),t("p",[e._v("On Windows, it retries renaming a file for up to one second if "),t("code",[e._v("EACCESS")]),e._v("\nor "),t("code",[e._v("EPERM")]),e._v(" error occurs, likely because antivirus software has locked\nthe directory.")]),e._v(" "),t("h2",{attrs:{id:"usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" USAGE")]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// use just like fs")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" fs "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'graceful-fs'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// now go and do stuff with it...")]),e._v("\nfs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("readFile")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'some-file-or-whatever'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" data")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Do stuff here.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("h2",{attrs:{id:"sync-methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sync-methods"}},[e._v("#")]),e._v(" Sync methods")]),e._v(" "),t("p",[e._v("This module cannot intercept or handle "),t("code",[e._v("EMFILE")]),e._v(" or "),t("code",[e._v("ENFILE")]),e._v(" errors from sync\nmethods.  If you use sync methods which open file descriptors then you are\nresponsible for dealing with any errors.")]),e._v(" "),t("p",[e._v("This is a known limitation, not a bug.")]),e._v(" "),t("h2",{attrs:{id:"global-patching"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#global-patching"}},[e._v("#")]),e._v(" Global Patching")]),e._v(" "),t("p",[e._v("If you want to patch the global fs module (or any other fs-like\nmodule) you can do this:")]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Make sure to read the caveat below.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" realFs "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'fs'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" gracefulFs "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'graceful-fs'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\ngracefulFs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("gracefulify")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("realFs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("This should only ever be done at the top-level application layer, in\norder to delay on EMFILE errors from any fs-using dependencies.  You\nshould "),t("strong",[e._v("not")]),e._v(" do this in a library, because it can cause unexpected\ndelays in other parts of the program.")]),e._v(" "),t("h2",{attrs:{id:"changes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#changes"}},[e._v("#")]),e._v(" Changes")]),e._v(" "),t("p",[e._v("This module is fairly stable at this point, and used by a lot of\nthings.  That being said, because it implements a subtle behavior\nchange in a core part of the node API, even modest changes can be\nextremely breaking, and the versioning is thus biased towards\nbumping the major when in doubt.")]),e._v(" "),t("p",[e._v("The main change between major versions has been switching between\nproviding a fully-patched "),t("code",[e._v("fs")]),e._v(" module vs monkey-patching the node core\nbuiltin, and the approach by which a non-monkey-patched "),t("code",[e._v("fs")]),e._v(" was\ncreated.")]),e._v(" "),t("p",[e._v("The goal is to trade "),t("code",[e._v("EMFILE")]),e._v(" errors for slower fs operations.  So, if\nyou try to open a zillion files, rather than crashing, "),t("code",[e._v("open")]),e._v("\noperations will be queued up and wait for something else to "),t("code",[e._v("close")]),e._v(".")]),e._v(" "),t("p",[e._v("There are advantages to each approach.  Monkey-patching the fs means\nthat no "),t("code",[e._v("EMFILE")]),e._v(" errors can possibly occur anywhere in your\napplication, because everything is using the same core "),t("code",[e._v("fs")]),e._v(" module,\nwhich is patched.  However, it can also obviously cause undesirable\nside-effects, especially if the module is loaded multiple times.")]),e._v(" "),t("p",[e._v("Implementing a separate-but-identical patched "),t("code",[e._v("fs")]),e._v(" module is more\nsurgical (and doesn't run the risk of patching multiple times), but\nalso imposes the challenge of keeping in sync with the core module.")]),e._v(" "),t("p",[e._v("The current approach loads the "),t("code",[e._v("fs")]),e._v(" module, and then creates a\nlookalike object that has all the same methods, except a few that are\npatched.  It is safe to use in all versions of Node from 0.8 through\n7.0.")]),e._v(" "),t("h3",{attrs:{id:"v4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v4"}},[e._v("#")]),e._v(" v4")]),e._v(" "),t("ul",[t("li",[e._v("Do not monkey-patch the fs module.  This module may now be used as a\ndrop-in dep, and users can opt into monkey-patching the fs builtin\nif their app requires it.")])]),e._v(" "),t("h3",{attrs:{id:"v3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v3"}},[e._v("#")]),e._v(" v3")]),e._v(" "),t("ul",[t("li",[e._v("Monkey-patch fs, because the eval approach no longer works on recent\nnode.")]),e._v(" "),t("li",[e._v("fixed possible type-error throw if rename fails on windows")]),e._v(" "),t("li",[e._v("verify that we "),t("em",[e._v("never")]),e._v(" get EMFILE errors")]),e._v(" "),t("li",[e._v("Ignore ENOSYS from chmod/chown")]),e._v(" "),t("li",[e._v("clarify that graceful-fs must be used as a drop-in")])]),e._v(" "),t("h3",{attrs:{id:"v2-1-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v2-1-0"}},[e._v("#")]),e._v(" v2.1.0")]),e._v(" "),t("ul",[t("li",[e._v("Use eval rather than monkey-patching fs.")]),e._v(" "),t("li",[e._v("readdir: Always sort the results")]),e._v(" "),t("li",[e._v("win32: requeue a file if error has an OK status")])]),e._v(" "),t("h3",{attrs:{id:"v2-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v2-0"}},[e._v("#")]),e._v(" v2.0")]),e._v(" "),t("ul",[t("li",[e._v("A return to monkey patching")]),e._v(" "),t("li",[e._v("wrap process.cwd")])]),e._v(" "),t("h3",{attrs:{id:"v1-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v1-1"}},[e._v("#")]),e._v(" v1.1")]),e._v(" "),t("ul",[t("li",[e._v("wrap readFile")]),e._v(" "),t("li",[e._v("Wrap fs.writeFile.")]),e._v(" "),t("li",[e._v("readdir protection")]),e._v(" "),t("li",[e._v("Don't clobber the fs builtin")]),e._v(" "),t("li",[e._v("Handle fs.read EAGAIN errors by trying again")]),e._v(" "),t("li",[e._v("Expose the curOpen counter")]),e._v(" "),t("li",[e._v("No-op lchown/lchmod if not implemented")]),e._v(" "),t("li",[e._v("fs.rename patch only for win32")]),e._v(" "),t("li",[e._v("Patch fs.rename to handle AV software on Windows")]),e._v(" "),t("li",[e._v("Close #4 Chown should not fail on einval or eperm if non-root")]),e._v(" "),t("li",[e._v("Fix isaacs/fstream#1 Only wrap fs one time")]),e._v(" "),t("li",[e._v("Fix #3 Start at 1024 max files, then back off on EMFILE")]),e._v(" "),t("li",[e._v("lutimes that doens't blow up on Linux")]),e._v(" "),t("li",[e._v("A full on-rewrite using a queue instead of just swallowing the EMFILE error")]),e._v(" "),t("li",[e._v("Wrap Read/Write streams as well")])]),e._v(" "),t("h3",{attrs:{id:"_1-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-0"}},[e._v("#")]),e._v(" 1.0")]),e._v(" "),t("ul",[t("li",[e._v("Update engines for node 0.6")]),e._v(" "),t("li",[e._v("Be lstat-graceful on Windows")]),e._v(" "),t("li",[e._v("first")])])])}),[],!1,null,null,null);a.default=n.exports}}]);