(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{590:function(t,e,s){"use strict";s.r(e);var a=s(53),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"watchpack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watchpack"}},[t._v("#")]),t._v(" watchpack")]),t._v(" "),s("p",[t._v("Wrapper library for directory and file watching.")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://travis-ci.org/webpack/watchpack",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://travis-ci.org/webpack/watchpack.svg?branch=master",alt:"Build Status"}}),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://ci.appveyor.com/project/sokra/watchpack/branch/master",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true",alt:"Build status"}}),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://coveralls.io/r/webpack/watchpack/",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/coveralls/webpack/watchpack.svg",alt:"Test coverage"}}),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://codecov.io/gh/webpack/watchpack",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg",alt:"codecov"}}),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://www.npmjs.com/package/watchpack",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/npm/dm/watchpack.svg",alt:"downloads"}}),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://github.com/webpack/watchpack/graphs/contributors",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/github/contributors/webpack/watchpack.svg",alt:"Github contributors"}}),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"concept"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concept"}},[t._v("#")]),t._v(" Concept")]),t._v(" "),s("p",[t._v("watchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.")]),t._v(" "),s("ul",[s("li",[t._v("The high level API requests "),s("code",[t._v("DirectoryWatchers")]),t._v(" from a "),s("code",[t._v("WatcherManager")]),t._v(", which ensures that only a single "),s("code",[t._v("DirectoryWatcher")]),t._v(" per directory is created.")]),t._v(" "),s("li",[t._v("A user-faced "),s("code",[t._v("Watcher")]),t._v(" can be obtained from a "),s("code",[t._v("DirectoryWatcher")]),t._v(" and provides a filtered view on the "),s("code",[t._v("DirectoryWatcher")]),t._v(".")]),t._v(" "),s("li",[t._v("Reference-counting is used on the "),s("code",[t._v("DirectoryWatcher")]),t._v(" and "),s("code",[t._v("Watcher")]),t._v(" to decide when to close them.")]),t._v(" "),s("li",[t._v("The real watchers are created by the "),s("code",[t._v("DirectoryWatcher")]),t._v(".")]),t._v(" "),s("li",[t._v("Files are never watched directly. This should keep the watcher count low.")]),t._v(" "),s("li",[t._v("Watching can be started in the past. This way watching can start after file reading.")]),t._v(" "),s("li",[t._v("Symlinks are not followed, instead the symlink is watched.")])]),t._v(" "),s("h2",{attrs:{id:"api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Watchpack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"watchpack"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" wp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Watchpack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// options:")]),t._v("\n\taggregateTimeout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// fire "aggregated" event when after a change for 1000ms no additional change occurred')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// aggregated defaults to undefined, which doesn\'t fire an "aggregated" event')]),t._v("\n\n\tpoll"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// poll: true - use polling with the default interval")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// poll: 10000 - use polling with an interval of 10s")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// poll defaults to undefined, which prefer native watching methods")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note: enable polling when watching on a network path")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When WATCHPACK_POLLING environment variable is set it will override this option")]),t._v("\n\n\tfollowSymlinks"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true: follows symlinks and watches symlinks and real files")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false (default): watches only specified item they may be real files or symlinks")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   (This makes sense when symlinks has already been resolved)")]),t._v("\n\n\tignored"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**/.git"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ignored: "string" - a glob pattern for files or folders that should not be watched')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ignored: ["string", "string"] - multiple glob patterns that should be ignored')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ignored: /regexp/ - a regular expression for files or folders that should not be watched")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// All subdirectories are ignored too")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Watchpack.prototype.watch({")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   files: Iterable<string>,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   directories: Iterable<string>,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   missing: Iterable<string>,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   startTime?: number")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// })")]),t._v("\nwp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfiles"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" listOfFiles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tdirectories"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" listOfDirectories"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tmissing"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" listOfNotExistingItems"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tstartTime"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// starts watching these files and directories")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// calling this again will override the files and directories")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// files: can be files or directories, for files: content and existence changes are tracked")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        for directories: only existence and timestamp changes are tracked")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// directories: only directories, directory content (and content of children, ...) and")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//              existence changes are tracked.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//              assumed to exist, when directory is not found without further information a remove event is emitted")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// missing: can be files or directorees,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//          only existence changes are tracked")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//          expected to not exist, no remove event is emitted when not found initially")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// files and directories are assumed to exist, when they are not found without further information a remove event is emitted")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// missing is assumed to not exist and no remove event is emitted")]),t._v("\n\nwp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"change"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("filePath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mtime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" explanation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// filePath: the changed file")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mtime: last modified time for the changed file")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// explanation: textual information how this change was detected")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nwp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"remove"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("filePath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" explanation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// filePath: the removed file or directory")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// explanation: textual information how this change was detected")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nwp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aggregated"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("changes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" removals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// changes: a Set of all changed files")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// removals: a Set of all removed files")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// watchpack gives up ownership on these Sets.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Watchpack.prototype.pause()")]),t._v("\nwp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pause")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stops emitting events, but keeps watchers open")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// next "watch" call can reuse the watchers')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The watcher will keep aggregating events")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// which can be received with getAggregated()")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Watchpack.prototype.close()")]),t._v("\nwp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stops emitting events and closes all watchers")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Watchpack.prototype.getAggregated(): { changes: Set<string>, removals: Set<string> }")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" changes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" removals "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAggregated")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns the current aggregated info and removes that from the watcher")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The next aggregated event won't include that info and will only emitted")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// when futher changes happen")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Can also be used when paused.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Watchpack.prototype.getTimeInfoEntries()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fileTimes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTimeInfoEntries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns a Map with all known time info objects for files and directories")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this include info from files not directly watched")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key: absolute path, value: object with { safeTime, timestamp }")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// safeTime: a point in time at which it is safe to say all changes happened before that")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// timestamp: only for files, the mtime timestamp of the file")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (deprecated)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Watchpack.prototype.getTimes()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fileTimes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTimes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns an object with all known change times for files")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this include timestamps from files not directly watched")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key: absolute path, value: timestamp as number")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);